<application>
  <component name="AppStorage">
    <histories>
      <item value="* This method gives the filter an opportunity to clean up any resources * that are being held (for example, memory, file handles, threads) and make * sure that any persistent state is synchronized with the filter's current * state in memory." />
      <item value="Called by the web container to indicate to a filter that it is being * taken out of service. This method is only called once all threads within * the filter's doFilter method have exited or after a timeout period has * passed. After the web container calls this method, it will not call the * doFilter method again on this instance of the filter. &lt;br&gt; * &lt;br&gt; *" />
      <item value="indicate" />
      <item value="maintaining" />
      <item value="Thread Local Map" />
      <item value="Note: further occurrences of HTTP request parsing errors will be logged at DEBUG level." />
      <item value="The class {@code String} includes methods for examining * individual characters of the sequence, for comparing strings, for * searching strings, for extracting substrings, and for creating a * copy of a string with all characters translated to uppercase or to * lowercase. Case mapping is based on the Unicode Standard version * specified by the {@link java.lang.Character Character} class. * &lt;p&gt; * The Java language provides special support for the string * concatenation operator (&amp;nbsp;+&amp;nbsp;), and for conversion of * other objects to strings. String concatenation is implemented * through the {@code StringBuilder}(or {@code StringBuffer}) * class and its {@code append} method. * String conversions are implemented through the method * {@code toString}, defined by {@code Object} and * inherited by all classes in Java. For additional information on * string concatenation and conversion, see Gosling, Joy, and Steele, * &lt;i&gt;The Java Language Specification&lt;/i&gt;. * * &lt;p&gt; Unless otherwise noted, passing a &lt;tt&gt;null&lt;/tt&gt; argument to a constructor * or method in this class will cause a {@link NullPointerException} to be * thrown. * * &lt;p&gt;A {@code String} represents a string in the UTF-16 format * in which &lt;em&gt;supplementary characters&lt;/em&gt; are represented by &lt;em&gt;surrogate * pairs&lt;/em&gt; (see the section &lt;a href=&quot;Character.html#unicode&quot;&gt;Unicode * Character Representations&lt;/a&gt; in the {@code Character} class for * more information). * Index values refer to {@code char} code units, so a supplementary * character uses two positions in a {@code String}. * &lt;p&gt;The {@code String} class provides methods for dealing with * Unicode code points (i.e., characters), in addition to those for * dealing with Unicode code units (i.e., {@code char} values). *" />
      <item value="机构" />
      <item value="* * &lt;p&gt;&lt;b&gt;NOTE:&lt;/b&gt; {@code @RestController} is processed if an appropriate * {@code HandlerMapping}-{@code HandlerAdapter} pair is configured such as the * {@code RequestMappingHandlerMapping}-{@code RequestMappingHandlerAdapter} * pair which are the default in the MVC Java config and the MVC namespace." />
      <item value="* Support a current transaction, create a new one if none exists. * Analogous to EJB transaction attribute of the same name. * &lt;p&gt;This is the default setting of a transaction annotation." />
      <item value="Proceed with the next advice or target method invocation * &lt;p/&gt; * &lt;p&gt;Unlike code style, proceed(..) in annotation style places different requirements on the * parameters passed to it. The proceed(..) call takes, in this order: * &lt;ul&gt; * &lt;li&gt; If 'this()' was used in the pointcut for binding, it must be passed first in proceed(..). * &lt;li&gt; If 'target()' was used in the pointcut for binding, it must be passed next in proceed(..) - * it will be the first argument to proceed(..) if this() was not used for binding. * &lt;li&gt; Finally come all the arguments expected at the join point, in the order they are supplied * at the join point. Effectively the advice signature is ignored - it doesn't matter * if a subset of arguments were bound or the ordering was changed in the advice signature, * the proceed(..) calls takes all of them in the right order for the join point. * &lt;/ul&gt; * &lt;p&gt;Since proceed(..) in this case takes an Object array, AspectJ cannot do as much * compile time checking as it can for code style. If the rules above aren't obeyed * then it will unfortunately manifest as a runtime error. * &lt;/p&gt;" />
      <item value="* Proceed with the next advice or target method invocation" />
      <item value="站内信" />
      <item value="designated" />
      <item value="appointment" />
      <item value="attempt" />
      <item value="constant" />
      <item value="快照" />
      <item value="lazyer" />
      <item value="milliseconds" />
      <item value="to Be Confirmed" />
      <item value="待受理" />
      <item value="待确认" />
      <item value="建议外送" />
      <item value="已受理" />
      <item value="外送" />
      <item value="integrate" />
      <item value="temporary Storage" />
      <item value="handler" />
      <item value="handle" />
      <item value="dispose" />
      <item value="integral" />
      <item value="fragment" />
      <item value="* @deprecated See individual attributes for intended replacements. To be removed in 4.1" />
      <item value="individual" />
      <item value="Extends" />
      <item value="证明材料" />
      <item value="列" />
      <item value="Initializes the validator in preparation for * {@link #isValid(Object, ConstraintValidatorContext)} calls. * The constraint annotation for a given constraint declaration * is passed. * &lt;p/&gt; * This method is guaranteed to be called before any use of this instance for * validation. * * @param constraintAnnotation annotation instance for a given constraint declaration" />
      <item value="* Returns an instance of the specified type allowing access to * provider-specific APIs. If the Bean Validation provider * implementation does not support the specified class, * {@link ValidationException} is thrown." />
      <item value="* Provides contextual data and operation when applying a given constraint validator. * * At least one {@link ConstraintViolation} must be defined (either the default one, * of if the default {@code ConstraintViolation} is disabled, a custom one)." />
      <item value="This method is guaranteed to be called before any use of this instance for * validation." />
      <item value="manage" />
      <item value="业务" />
      <item value="流水号" />
      <item value="street" />
      <item value="street Name" />
      <item value="sensitive" />
      <item value="推荐" />
      <item value="reservation State" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="297" />
        <entry key="ENGLISH" value="298" />
        <entry key="BOSNIAN" value="1" />
        <entry key="DANISH" value="3" />
        <entry key="RUSSIAN" value="1" />
        <entry key="CATALAN" value="1" />
        <entry key="CROATIAN" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="LITHUANIAN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="SWEDISH" value="2" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20190917000334998" />
        <option name="appKeyConfigured" value="true" />
      </app-key>
    </option>
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="fanyi.baidu" />
  </component>
</application>