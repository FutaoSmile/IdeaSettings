<application>
  <component name="AppStorage">
    <histories>
      <item value="must Not Conflict" />
      <item value="Conflict" />
      <item value="free" />
      <item value="推荐" />
      <item value="合作过" />
      <item value="count" />
      <item value="待派单" />
      <item value="History" />
      <item value="Contact" />
      <item value="备注" />
      <item value="remark" />
      <item value="remarks" />
      <item value="attendance" />
      <item value="考勤" />
      <item value="attendence" />
      <item value="attdence" />
      <item value="异常" />
      <item value="Extention Policy" />
      <item value="Extention" />
      <item value="Abort Policy" />
      <item value="Abort" />
      <item value="流水号" />
      <item value="masked" />
      <item value="primitive type" />
      <item value="expire" />
      <item value="过期" />
      <item value="Claims" />
      <item value="Duration" />
      <item value="* @return {@code true} if the execution chain should proceed with the * next interceptor or the handler itself. Else, DispatcherServlet assumes * that this interceptor has already dealt with the response itself." />
      <item value="* @param handler chosen handler to execute, for type and/or instance evaluation * @return {@code true} if the execution chain should proceed with the * next interceptor or the handler itself. Else, DispatcherServlet assumes * that this interceptor has already dealt with the response itself." />
      <item value="* Called instead of {@code postHandle} and {@code afterCompletion} * when the handler is being executed concurrently. * &lt;p&gt;Implementations may use the provided request and response but should * avoid modifying them in ways that would conflict with the concurrent * execution of the handler. A typical use of this method would be to * clean up thread-local variables. * @param request the current request * @param response the current response * @param handler the handler (or {@link HandlerMethod}) that started async * execution, for type and/or instance examination * @throws Exception in case of errors */" />
      <item value="more likely" />
      <item value="* A convenience annotation that is itself annotated with * {@link ControllerAdvice @ControllerAdvice} * and {@link ResponseBody @ResponseBody}. * * &lt;p&gt;Types that carry this annotation are treated as controller advice where * {@link ExceptionHandler @ExceptionHandler} methods assume * {@link ResponseBody @ResponseBody} semantics by default. * * &lt;p&gt;&lt;b&gt;NOTE:&lt;/b&gt; {@code @RestControllerAdvice} is processed if an appropriate * {@code HandlerMapping}-{@code HandlerAdapter} pair is configured such as the * {@code RequestMappingHandlerMapping}-{@code RequestMappingHandlerAdapter} pair * which are the default in the MVC Java config and the MVC namespace. *" />
      <item value="Return the class that declares the underlying Method or Constructor." />
      <item value="Helper class that encapsulates the specification of a method parameter, i.e. a {@link Method} * or {@link Constructor} plus a parameter index and a nested type index for a declared generic * type. Useful as a specification object to pass along." />
      <item value="Advice" />
      <item value="verify Code Expire Minute" />
      <item value="头像" />
      <item value="avatar" />
      <item value="女" />
      <item value="男" />
      <item value="UNKNOW" />
      <item value="gender" />
      <item value="创建人" />
      <item value="更新人" />
      <item value="updater" />
      <item value="creator" />
      <item value="deprecation" />
      <item value="* Set the request interceptors that this accessor should use. * &lt;p&gt;The interceptors will get immediately sorted according to their * {@linkplain AnnotationAwareOrderComparator#sort(List) order}. * @see #getRequestFactory() * @see AnnotationAwareOrderComparator */" />
      <item value="完整的" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="1044" />
        <entry key="ENGLISH" value="1045" />
        <entry key="BOSNIAN" value="1" />
        <entry key="DANISH" value="6" />
        <entry key="GERMAN" value="3" />
        <entry key="RUSSIAN" value="1" />
        <entry key="FRENCH" value="4" />
        <entry key="FINNISH" value="2" />
        <entry key="CATALAN" value="1" />
        <entry key="CROATIAN" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="LITHUANIAN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="PORTUGUESE" value="2" />
        <entry key="SWEDISH" value="2" />
        <entry key="SPANISH" value="4" />
        <entry key="ITALIAN" value="2" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20190917000334998" />
      </app-key>
    </option>
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="fanyi.baidu" />
  </component>
</application>